package de.metalcon.sdd.entity;

/**
 * This file is generated by staticDataDeliveryGenerator. Changes to it are not
 * permanent. Rather change the corresponding template file in
 * "staticDataDeliverGenerator/template/".
 */

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.json.simple.JSONValue;

import de.metalcon.common.Muid;
import de.metalcon.sdd.Detail;
import de.metalcon.sdd.IdDetail;
import de.metalcon.sdd.server.Server;

public class Band extends Entity {

    private String name;

    private String url;

    private String foundation;

    private City city;

    private List<Genre> genres;

    private List<Musician> musicians;

    private List<Event> events;

    private List<Tour> tours;

    private List<Record> records;

    public Band(Server server) {
        super(server);
    }

    @Override
    public String getType() {
        return "Band";
    }

    @Override
    public void loadFromJson(String json) {
        Map<String, String> entity = parseJson(json);

        setId(new Muid(entity.get("id")));

        name = loadPrimitive(String.class, entity.get("name"));
        url = loadPrimitive(String.class, entity.get("url"));
        foundation = loadPrimitive(String.class, entity.get("foundation"));
        city = loadEntity(City.class, entity.get("city"));
        genres = loadEntityArray(Genre.class, entity.get("genres"));
        musicians = loadEntityArray(Musician.class, entity.get("musicians"));
        events = loadEntityArray(Event.class, entity.get("events"));
        tours = loadEntityArray(Tour.class, entity.get("tours"));
        records = loadEntityArray(Record.class, entity.get("records"));
    }

    @Override
    public void loadFromCreateParams(Map<String, String[]> params) {
        setId(new Muid(getParam(params, "id")));

        name = loadPrimitive(String.class, getParam(params, "name"));
        url = loadPrimitive(String.class, getParam(params, "url"));
        foundation = loadPrimitive(String.class, getParam(params, "foundation"));
        city = loadEntity(City.class, getParam(params, "city"));
        genres = loadEntityArray(Genre.class, getParam(params, "genres"));
        musicians = loadEntityArray(Musician.class, getParam(params, "musicians"));
        events = loadEntityArray(Event.class, getParam(params, "events"));
        tours = loadEntityArray(Tour.class, getParam(params, "tours"));
        records = loadEntityArray(Record.class, getParam(params, "records"));
    }

    @Override
    public void loadFromUpdateParams(Map<String, String[]> params) {
        Muid id = new Muid(getParam(params, "id"));
        IdDetail idDetail = new IdDetail(id, Detail.FULL);
        String json = server.readEntity(idDetail);
        Map<String, String> entity = parseJson(json);

        setId(new Muid(entity.get("id")));

        name = loadPrimitive(String.class, getParam(params, "name"), entity.get("name"));
        url = loadPrimitive(String.class, getParam(params, "url"), entity.get("url"));
        foundation = loadPrimitive(String.class, getParam(params, "foundation"), entity.get("foundation"));
        city = loadEntity(City.class, getParam(params, "city"), entity.get("city"));
        genres = loadEntityArray(Genre.class, getParam(params, "genres"), entity.get("genres"));
        musicians = loadEntityArray(Musician.class, getParam(params, "musicians"), entity.get("musicians"));
        events = loadEntityArray(Event.class, getParam(params, "events"), entity.get("events"));
        tours = loadEntityArray(Tour.class, getParam(params, "tours"), entity.get("tours"));
        records = loadEntityArray(Record.class, getParam(params, "records"), entity.get("records"));
    }

    @Override
    public Set<Muid> getDependingOn() {
        Set<Muid> ids = new HashSet<Muid>();
        colAddIfNotNull(ids, getEntityId(city));
        colAddIfNotNull(ids, getEntityArrayIds(genres));
        colAddIfNotNull(ids, getEntityArrayIds(musicians));
        colAddIfNotNull(ids, getEntityArrayIds(events));
        colAddIfNotNull(ids, getEntityArrayIds(tours));
        colAddIfNotNull(ids, getEntityArrayIds(records));
        return ids;
    }

    @Override
    protected void generateJson() {
        Map<String, Object> j;

        // FULL
        j = new HashMap<String, Object>();
        j.put("id", getId().toString());
        j.put("name", generatePrimitive(name));
        j.put("url", generatePrimitive(url));
        j.put("foundation", generatePrimitive(foundation));
        j.put("city", idToString(getEntityId(city)));
        j.put("genres", idsToString(getEntityArrayIds(genres)));
        j.put("musicians", idsToString(getEntityArrayIds(musicians)));
        j.put("events", idsToString(getEntityArrayIds(events)));
        j.put("tours", idsToString(getEntityArrayIds(tours)));
        j.put("records", idsToString(getEntityArrayIds(records)));
        json.put(Detail.FULL, JSONValue.toJSONString(j));

        // SYMBOL
        j = new HashMap<String, Object>();
        j.put("id", getId().toString());
        j.put("name", generatePrimitive(name));
        j.put("url", generatePrimitive(url));
        json.put(Detail.SYMBOL, JSONValue.toJSONString(j));

        // LINE
        j = new HashMap<String, Object>();
        j.put("id", getId().toString());
        j.put("name", generatePrimitive(name));
        j.put("city", generateEntity(city, Detail.SYMBOL));
        j.put("foundation", generatePrimitive(foundation));
        j.put("url", generatePrimitive(url));
        json.put(Detail.LINE, JSONValue.toJSONString(j));

        // PARAGRAPH
        j = new HashMap<String, Object>();
        j.put("id", getId().toString());
        j.put("genres", generateEntityArray(genres, Detail.SYMBOL));
        j.put("name", generatePrimitive(name));
        j.put("city", generateEntity(city, Detail.LINE));
        j.put("foundation", generatePrimitive(foundation));
        j.put("url", generatePrimitive(url));
        j.put("records", generateEntityArray(records, Detail.LINE));
        json.put(Detail.PARAGRAPH, JSONValue.toJSONString(j));

        // PROFILE
        j = new HashMap<String, Object>();
        j.put("id", getId().toString());
        j.put("genres", generateEntityArray(genres, Detail.LINE));
        j.put("name", generatePrimitive(name));
        j.put("musicians", generateEntityArray(musicians, Detail.LINE));
        j.put("city", generateEntity(city, Detail.LINE));
        j.put("tours", generateEntityArray(tours, Detail.LINE));
        j.put("events", generateEntityArray(events, Detail.LINE));
        j.put("foundation", generatePrimitive(foundation));
        j.put("url", generatePrimitive(url));
        j.put("records", generateEntityArray(records, Detail.LINE));
        json.put(Detail.PROFILE, JSONValue.toJSONString(j));

        // TOOLTIP
        j = new HashMap<String, Object>();
        j.put("id", getId().toString());
        j.put("genres", generateEntityArray(genres, Detail.SYMBOL));
        j.put("name", generatePrimitive(name));
        j.put("city", generateEntity(city, Detail.SYMBOL));
        j.put("foundation", generatePrimitive(foundation));
        j.put("url", generatePrimitive(url));
        j.put("records", generateEntityArray(records, Detail.SYMBOL));
        json.put(Detail.TOOLTIP, JSONValue.toJSONString(j));

        // SEARCH_ENTRY
        j = new HashMap<String, Object>();
        j.put("id", getId().toString());
        json.put(Detail.SEARCH_ENTRY, JSONValue.toJSONString(j));

        // SEARCH_DETAILED
        j = new HashMap<String, Object>();
        j.put("id", getId().toString());
        json.put(Detail.SEARCH_DETAILED, JSONValue.toJSONString(j));
    }

}
