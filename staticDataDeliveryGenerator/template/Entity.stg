delimiters "$","$"

// name - String
// attrs - Object[]
//     .name - String
//     .type - String
//     .primitive - Boolean
//     .array - Boolean
// jsons - String[]
// hasArray - Boolean
entity(name,attrs,jsons,hasArray) ::= <<
package de.metalcon.sdd.entity;

/**
 * This file is generated by staticDataDeliveryGenerator. Changes to it are not
 * permanent. Rather change the corresponding template file in
 * "staticDataDeliverGenerator/template/".
 */

import java.util.HashMap;
$if(hasArray)$import java.util.List;$endif$
import java.util.Map;

import org.json.simple.JSONValue;

import de.metalcon.common.Muid;
import de.metalcon.sdd.Detail;
import de.metalcon.sdd.IdDetail;
import de.metalcon.sdd.server.Server;

public class $name$ extends Entity {

    $attrs:{attr|private $javaType(attr.type,attr.array)$ $attr.name$;
    };separator="\n"$
    public $name$(Server server) {
        super(server);
    }
    
    @Override
    public void loadFromJson(String json) {
        Map<String, String> entity = parseJson(json);
        
        setId(new Muid(entity.get("id")));
        
        $attrs:{attr|$loadJson(attr)$}; separator="\n"$
    }
    
    @Override
    public void loadFromCreateParams(Map<String, String[]> params) {
        setId(new Muid(getParam(params, "id")));
        
        $attrs:{attr|$loadCreate(attr)$}; separator="\n"$
    }
    
    @Override
    public void loadFromUpdateParams(Map<String, String[]> params) {
        Muid id = new Muid(getParam(params, "id"));
        IdDetail idDetail = new IdDetail(id, Detail.FULL);
        String json = server.readEntity(idDetail);
        Map<String, String> entity = parseJson(json);
        
        setId(new Muid(entity.get("id")));
        
        $attrs:{attr|$loadUpdate(attr)$}; separator="\n"$
    }
    
    @Override
    protected void generateJson() {
        Map<String, Object> j;
        
        $jsons; separator="\n\n"$
    }
    
}
>>

// type - String
// array - Boolean
javaType(type,array) ::= <%
$if(array)$
    List<$type$>
$else$
    $type$
$endif$
%>

// -----------------------------------------------------------------------------
// --- load --------------------------------------------------------------------

// attr - Object
//     .name - String
//     .type - String
//     .primitive - Boolean
//     .array - Boolean

loadJson(attr) ::= <%
$if(attr.primitive)$
    $attr.name$ = loadPrimitive($attr.type$.class, $entityGet(attr.name)$);
$elseif(attr.array)$
    $attr.name$ = loadEntityArray($attr.type$.class, $entityGet(attr.name)$);
$else$
    $attr.name$ = loadEntity($attr.type$.class, $entityGet(attr.name)$);
$endif$
%>

loadCreate(attr) ::= <%
$if(attr.primitive)$
    $attr.name$ = loadPrimitive($attr.type$.class, $getParam(attr.name)$);
$elseif(attr.array)$
    $attr.name$ = loadEntityArray($attr.type$.class, $getParam(attr.name)$);
$else$
    $attr.name$ = loadEntity($attr.type$.class, $getParam(attr.name)$);
$endif$
%>

loadUpdate(attr) ::= <%
$if(attr.primitive)$
    $attr.name$ = loadPrimitive($attr.type$.class, $getParam(attr.name)$, $entityGet(attr.name)$);
$elseif(attr.array)$
    $attr.name$ = loadEntityArray($attr.type$.class, $getParam(attr.name)$, $entityGet(attr.name)$);
$else$
    $attr.name$ = loadEntity($attr.type$.class, $getParam(attr.name)$, $entityGet(attr.name)$);
$endif$
%>

entityGet(name) ::= "entity.get(\"$name$\")"
getParam(name)  ::= "getParam(params, \"$name$\")"

// -----------------------------------------------------------------------------
// --- generate ----------------------------------------------------------------

// detail - String
// oattrs - Object[]
//     .name - Stirng
//     .type - String
//     .primitive - Boolean
//     .array - Boolean
//     .detail - String
// full - Boolean

generate(detail,oattrs,full) ::= <<
// $detail$
j = new HashMap<String, Object>();
j.put("id", getId().toString());
$if(full)$$generateFull(oattrs)$$else$$generateOther(oattrs)$$endif$
json.put(Detail.$detail$, JSONValue.toJSONString(j));
>>

generateFull(oattrs) ::= <%
$oattrs:{oattr|
    j.put("$oattr.name$", 
    $if(oattr.primitive)$
        generatePrimitive($oattr.name$)
    $elseif(oattr.array)$
        generateEntityArrayIds($oattr.name$)
    $else$
        generateEntityId($oattr.name$)
    $endif$
    );
}; separator="\n"$
%>

generateOther(oattrs) ::= <%
$oattrs:{oattr|
    j.put("$oattr.name$", 
    $if(oattr.primitive)$
        generatePrimitive($oattr.name$)
    $elseif(oattr.array)$
        generateEntityArray($oattr.name$, Detail.$oattr.detail$)
    $else$
        generateEntity($oattr.name$, Detail.$oattr.detail$)
    $endif$
    );
}; separator="\n"$
%>